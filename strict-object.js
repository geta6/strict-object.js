// Generated by CoffeeScript 1.6.2
var StrictObject;

StrictObject = (function() {
  var _is, _object, _schema;

  _object = {};

  _schema = {};

  _is = function(name, object) {
    return (Object.prototype.toString.call(object)) === ("[object " + name + "]");
  };

  function StrictObject(schema) {
    var key, val, _fn,
      _this = this;

    if (schema == null) {
      schema = {};
    }
    _schema = schema;
    _fn = function(key, val) {
      return Object.defineProperty(_this, key, {
        enumerable: val.enumerable,
        configurable: false,
        get: function() {
          return _this.get(key);
        },
        set: function(value) {
          return _this.set(key, value);
        }
      });
    };
    for (key in _schema) {
      val = _schema[key];
      if (!_schema[key].hasOwnProperty('type')) {
        val.type = _schema[key].type = null;
      }
      if (!_schema[key].hasOwnProperty('default')) {
        val["default"] = _schema[key]["default"] = null;
      }
      if (!_schema[key].hasOwnProperty('writable')) {
        val.writable = _schema[key].writable = true;
      }
      if (!_schema[key].hasOwnProperty('validate')) {
        val.validate = _schema[key].validate = (function() {
          return true;
        });
      }
      if (!_schema[key].hasOwnProperty('enumerable')) {
        val.enumerable = _schema[key].enumerable = true;
      }
      _fn(key, val);
      this.set(key, val["default"]);
    }
  }

  StrictObject.prototype.set = function(key, val) {
    var settable;

    if (val == null) {
      val = null;
    }
    if (!_schema[key].writable && _object.hasOwnProperty(key)) {
      return _object[key];
    }
    if (val === null) {
      return _object[key] = _schema[key]["default"];
    }
    settable = false;
    if (_schema[key].type === null) {
      settable = true;
    } else if (_is('Array', _schema[key].type)) {
      if (-1 < _schema[key].type.indexOf(val)) {
        settable = true;
      }
    } else if (_is('RegExp', _schema[key].type)) {
      if (_schema[key].type.test(val)) {
        settable = true;
      }
    } else if (_is('Function', _schema[key].type)) {
      if (val === _schema[key].type(val)) {
        settable = true;
      }
      if (val instanceof _schema[key].type) {
        settable = true;
      }
    }
    if (settable && _schema[key].validate) {
      settable = _schema[key].validate(val, key);
    }
    if (settable) {
      _object[key] = val;
    }
    return _object[key];
  };

  StrictObject.prototype.get = function(key) {
    var object, val;

    if (key == null) {
      key = null;
    }
    if (key) {
      return _object[key];
    }
    object = {};
    for (key in _object) {
      val = _object[key];
      if (_schema[key].enumerable === true) {
        object[key] = val;
      }
    }
    return object;
  };

  return StrictObject;

})();
